version: '3.8'

networks:
  doh_zns:
    external: true

services:
  caddy:
    image: blackmini/caddyf
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - TZ=Asia/Shanghai
    networks:
      - doh_zns
    healthcheck:
      test: ["CMD", "caddy", "run", "--config", "/etc/caddy/Caddyfile", "--validate"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  zns:
    image: blackmini/zns
    container_name: zns
    restart: unless-stopped
    expose:
      - "443"
    volumes:
      - ./data:/data
      - /var/www/html:/var/www/html
      - caddy_data/caddy/certificates:/certificates:ro
      - ${HOME}/.autocert:/root/.autocert
    environment:
      - TZ=Asia/Shanghai
    command: >
      /bin/sh -c "
      if [ -f /certificates/acme-v02.api.letsencrypt.org-directory/zns.example.org/zns.example.org.crt ] && [ -f /certificates/acme-v02.api.letsencrypt.org-directory/zns.example.org/zns.example.org.key ]; then
        echo 'Using Caddy certificates...';
        ./zns -free -tls-hosts zns.example.org -root /var/www/html -db /data/zns.db -h12 :443 -h3 :443 -upstream https://doh.pub/dns-query -tls-cert /certificates/acme-v02.api.letsencrypt.org-directory/zns.example.org/zns.example.org.crt -tls-key /certificates/acme-v02.api.letsencrypt.org-directory/zns.example.org/zns.example.org.key;
      else
        echo 'Caddy certificates not found, ZNS will manage its own certificates...';
        ./zns -free -tls-hosts zns.example.org -root /var/www/html -db /data/zns.db -h12 :443 -h3 :443 -upstream https://doh.pub/dns-query;
      fi
      "
    networks:
      - doh_zns
    depends_on:
      caddy:
        condition: service_healthy

volumes:
  caddy_data:
  caddy_config:
  data: